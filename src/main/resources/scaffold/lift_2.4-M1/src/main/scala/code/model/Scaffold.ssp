<%@ var properName: String %>
<%@ var lowerName: String %>
<%@ var fieldList: List[FieldDefinition] %>

package code.model
import net.liftweb.mapper._

class ${properName} extends LongKeyedMapper[${properName}] with IdPK {
  def getSingleton = ${properName}

  #for (fieldDef <- fieldList)
    <% val mappedObject = fieldDef.typeInfo match {
      case StringData => "MappedString(this, 150)"
      case TextData => "MappedText(this)"
      case BooleanData => "MappedBoolean(this)"
      case DateData => "MappedDate(this)"
      case TimeData => "MappedDateTime(this)"
      case DoubleData => "MappedDouble(this)"
      case IntData => "MappedInt(this)"
      case LongData => "MappedLong(this)"
    } %>
  object ${fieldDef.lowerName} extends ${mappedObject}
  #end
}

object ${properName} extends ${properName} with LongKeyedMetaMapper[${properName}]
